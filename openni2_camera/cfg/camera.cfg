#! /usr/bin/env python

PACKAGE='openni2_camera' 
import os
import itertools
import roslib; roslib.load_manifest(PACKAGE)

from dynamic_reconfigure.parameter_generator import *

me = os.path.realpath(__file__)
cpp_header = os.path.realpath(os.path.join(os.path.dirname(me), "cpp", "openni2_camera", "CameraConfig.h"))

if os.path.exists(cpp_header) and os.path.getmtime(me) < os.path.getmtime(cpp_header):
    exit(0)

gen = ParameterGenerator()

ids = itertools.count(11);

rgb_resolution_enum = gen.enum([ 
    gen.const("RGB_320x240_30Hz", int_t, ids.next(), ""),
    gen.const("RGB_320x240_60Hz", int_t, ids.next(), ""),
    gen.const("RGB_640x480_30Hz", int_t, ids.next(), ""),
    gen.const("RGB_1280x720_30Hz", int_t, ids.next(), ""),
    gen.const("RGB_1280x1024_30Hz", int_t, ids.next(), ""),
    gen.const("YUV_320x240_30Hz", int_t, ids.next(), ""),
    gen.const("YUV_320x240_60Hz", int_t, ids.next(), ""),
    gen.const("YUV_640x480_30Hz", int_t, ids.next(), ""),
    gen.const("YUV_1280x1024_30Hz", int_t, ids.next(), ""),
], "resolution")

ids = itertools.count(21);

depth_resolution_enum = gen.enum([ 
    gen.const("DEPTH_320x240_30Hz", int_t, ids.next(), ""),
    gen.const("DEPTH_320x240_60Hz", int_t, ids.next(), ""),
    gen.const("DEPTH_640x480_30Hz", int_t, ids.next(), ""),
    gen.const("DISPARITY_320x240_30Hz", int_t, ids.next(), ""),
    gen.const("DISPARITY_320x240_60Hz", int_t, ids.next(), ""),
    gen.const("DISPARITY_640x480_30Hz", int_t, ids.next(), ""),
], "resolution")

ids = itertools.count(31);

ir_resolution_enum = gen.enum([ 
    gen.const("IR_320x240_30Hz", int_t, ids.next(), ""),
    gen.const("IR_320x240_60Hz", int_t, ids.next(), ""),
    gen.const("IR_640x480_30Hz", int_t, ids.next(), ""),
    gen.const("IR_1280x1024_30Hz", int_t, ids.next(), ""),
], "resolution")

gen.add("rgb_resolution",   int_t,      8, "", 13,        0, 100,  edit_method = rgb_resolution_enum)
gen.add("depth_resolution", int_t,     16, "", 23,        0, 100,  edit_method = depth_resolution_enum)
gen.add("ir_resolution",    int_t,     32, "", 33,        0, 100,  edit_method = ir_resolution_enum)

gen.add("depth_registration", bool_t, 1, "depth_registration");
gen.add("auto_exposure", bool_t, 2, "auto_exposure", True);
gen.add("auto_white_balance", bool_t, 4, "auto_white_balance", False);
gen.add("mirror", bool_t, 64, "mirror", False);

exit(gen.generate(PACKAGE, "openni2_camera", "Camera"))
